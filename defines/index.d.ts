type MonetizationState = 'stopped' | 'pending' | 'started';
type MonetizationEventDetail = {
  /** Your payment account URL. The same value is used as the content in your <meta> tag. */
  paymentPointer: string;
  /** This value is identical to the session ID/monetization ID (UUID v4) generated by the user agent */
  requestId: string;
  /** When true, the monetization tag has been removed or the paymentPointer changed. No more events with this requestId expected. */
  finalized?: boolean;
  /** The destination amount received as specified in the Interledger protocol (ILP) packet. */
  amount?: string;
  /** The code (typically three characters) identifying the amount's unit. A unit, for example, could be a currency (USD, XRP). */
  assetCode?: string;
  /** The number of places past the decimal for the amount. For example, if you have USD with an asset scale of two, then the minimum divisible unit is cents. */
  assetScale?: number;
};
type MonetizationEvent = { detail: MonetizationEventDetail };
interface Document {
  monetization: {
    state: MonetizationState;
    addEventListener: (
      type: 'monetizationstart' | 'monetizationpending' | 'monetizationstop' | 'monetizationprogress',
      cb: (event: MonetizationEvent) => void
    ) => void;
    removeEventListener: (
      type: 'monetizationstart' | 'monetizationpending' | 'monetizationstop' | 'monetizationprogress',
      cb: (event: MonetizationEvent) => void
    ) => void;
  };
}

type GoogleOAuthProfileType = {
  sub: string;
  email: string;
  name: string;
  picture: string;
  iss?: string;
  azp?: string;
  aud?: string;
  email_verified?: string;
  at_hash?: string;
  given_name?: string;
  family_name?: string;
  locale?: string;
  iat?: string;
  exp?: string;
  alg?: string;
  kid?: string;
  typ?: string;
  wallet?: string;
};

type GoogleOAuthTokenType = {
  access_token: string;
  expires_in: number;
  scope: string;
  token_type: string;
  id_token: string;
};

type User = {
  created: string;
  email: string;
  lastVisited: string;
  name: string;
  userId: string;
  wallet: string;
};

type Post = {
  postId: string;
  userId: string;
  created: string;
  text: string;
  downVotes: string[];
  upVotes: string[];
  isDisplay: boolean;
};

type PostMap = { [id: string]: Post };

type PostsPaginateKey = {
  isDisplay: boolean;
  created: string;
  postId: string;
};

type VoteTypes = 'up' | 'down';
